@startuml pipeline_http_select_decoder
title Pipeline HTTP Select Decoder
allowmixing

legend
//Ref: esp-adf/get-started/play_mp3_control//
//Ref: esp-adf/player/pipeline_http_mp3//
//Ref: esp-adf/player/pipeline_http_select_decoder//
//Ref: esp-adf/player/pipeline_living_stream//
end legend

node "HTTP Server" as HTTPServer  {
    portout "HTTP Source" as HTTPSource
} 

node "ESP Device" as ESPDevice  {

    json "<b><color navy>Periph Set" as periph_set {
        "<i>wifi_handle" : {
            "periph_wifi" : [".ssid", ".password"]
        }
    }
    
    portin "HTTP Sink" as HTTPSink

    component "Play Pipeline" as PlayPipeline {

        component HTTPStream [
            <b>http_stream
            ....
            <i>.type = AUDIO_STREAM_READER
            ....
            http_stream_reader
            [http]
            ....
            <i><color olive>msg.source_type == AUDIO_ELEMENT_TYPE_ELEMENT
            <i><color olive>msg.cmd == AEL_MSG_CMD_REPORT_MUSIC_INFO
        ]

        component SelectedDecoder [
            <b>selected_decoder
            ....
            <i>aac / amr / flac / mp3 / ogg / opus / wav
            ....
            selected_decoder
            [aac / amr / flac / mp3 / ogg / opus / wav]
            ....
            <i><color olive>msg.source_type == AUDIO_ELEMENT_TYPE_ELEMENT
            <i><color olive>msg.cmd == AEL_MSG_CMD_REPORT_MUSIC_INFO
        ]

        component I2SStream [
            <b>i2s_stream
            ....
            <i>.type = AUDIO_STREAM_WRITER
            ....
            i2s_stream_writer
            [i2s]
            ....
            <i><color olive>msg.source_type == AUDIO_ELEMENT_TYPE_ELEMENT
            <i><color olive>msg.cmd == AEL_MSG_CMD_REPORT_STATUS
            <i><color olive>msg.data == AEL_STATUS_STATE_STOPPED ||
            <i><color olive>msg.data == AEL_STATUS_STATE_FINISHED
        ]

        component HALCodec [
            <b>audio_hal_ctrl_codec
            ....
            <i>AUDIO_HAL_CODEC_MODE_DECODE
            ....
            [codec_chip]
        ]
    }

    portout "Analog Source" as AnalogSource
} 

node "Analog Audio" as AnalogAudio  {
    portin "Analog Sink" as AnalogSink
}

HTTPSource --> HTTPSink         #line:black;line.dotted;text:black

HTTPSink    --> HTTPStream      #line:black;line.dotted;text:black
HTTPStream  --> SelectedDecoder #line:black;line.bold;text:black
SelectedDecoder --> I2SStream   #line:black;line.bold;text:black
I2SStream  --> HALCodec         #line:black;line.dotted;text:black
HALCodec   --> AnalogSource     #line:black;line.dotted;text:black

AnalogSource --> AnalogSink     #line:black;line.dotted;text:black

@enduml